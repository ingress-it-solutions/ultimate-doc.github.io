{"pageProps":{"source":{"compiledSource":"var u=Object.defineProperty,c=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var n=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable;var s=(e,a,r)=>a in e?u(e,a,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[a]=r,t=(e,a)=>{for(var r in a||(a={}))n.call(a,r)&&s(e,r,a[r]);if(i)for(var r of i(a))d.call(a,r)&&s(e,r,a[r]);return e},l=(e,a)=>c(e,m(a));var p=(e,a)=>{var r={};for(var o in e)n.call(e,o)&&a.indexOf(o)<0&&(r[o]=e[o]);if(e!=null&&i)for(var o of i(e))a.indexOf(o)<0&&d.call(e,o)&&(r[o]=e[o]);return r};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(r){var o=r,{components:e}=o,a=p(o,[\"components\"]);return mdx(MDXLayout,l(t(t({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"hr\",null),mdx(\"h3\",t({},{id:\"introduction\"}),\"Introduction\"),mdx(\"p\",null,\"To activate inspection when your application is executed by an incoming http request you can use the WebRequestMonitoring middleware. \"),mdx(\"p\",null,\"Thanks to the middleware you are free to decide on which routes you want activate monitoring, based on your routes configuration or on your personal monitoring preferences.  \"),mdx(\"p\",null,\"WebRequestMonitoring middleware works like any other Laravel middleware you are familiar to.\"),mdx(\"p\",t({},{className:\"hint tip\"}),\"To get more information on how middlewares works in Laravel, take a look at Laravel's official documentation.\"),mdx(\"h3\",t({},{id:\"option-1---attach-to-the-middleware-group-recommended\"}),\"Option 1 - Attach to the middleware group (recommended)\"),mdx(\"p\",null,\"Basically you can attach the middleware in the App\\\\Http\\\\Kernel class in one or more of your predefined middleware groups:\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-php\"}),`/**\n * The application's route middleware groups.\n *\n * @var  array\n */\nprotected $middlewareGroups = [\n    'web' => [\n        ...,\n        \\\\Ultimate\\\\Laravel\\\\Middleware\\\\WebRequestMonitoring::class,\n    ],\n\n    'api' => [\n        ...,\n        \\\\Ultimate\\\\Laravel\\\\Middleware\\\\WebRequestMonitoring::class,\n    ]\n]\n`)),mdx(\"p\",null,\"Usually web and api middleare groups wrap your entire application, so in two lines of code you can monitoring all incoming http requests.\"),mdx(\"h3\",t({},{id:\"option-2---use-as-middleware-key\"}),\"Option 2 - Use as middleware key\"),mdx(\"p\",null,\"In alternative you can create a middleware key so you can attach it in a specific route or group:\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-php\"}),`/*\n * Create a new middleware key (ultimate) in your \\\\App\\\\Http\\\\Kernel class.\n */\nprotected $routeMiddleware = [\n    ...,\n    \n    'ultimate' => \\\\Ultimate\\\\Laravel\\\\Middleware\\\\WebRequestMonitoring::class,\n];\n\n`)),mdx(\"p\",null,'Use \"ultimate\" middleware key in you routes:'),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-php\"}),`/*\n * Attach the \"ultimate\" middleware in your routes\n */\nRoute::prefix('app')->middleware('ultimate')->group(function () {\n    ...\n});\n`)),mdx(\"h3\",t({},{id:\"ignore-web-requests\"}),\"Ignore Web Requests\"),mdx(\"p\",t({},{className:\"hint warn\"}),\"Filtering by URLs is supported by default via a simple configuration parameter. Learn more here.\"),mdx(\"p\",null,\"Palzin APM provide a basic strategy to turn off monitoring in certain part of your application, but the middleware is designed to allows you to extend it and add your own strategy overwriting shouldRecorded method that should return a boolean to determine if the current request should be recorded or not.\"),mdx(\"p\",null,\"Run the artisan command below to create a new middleware class:\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-php\"}),`php artisan make:middleware UltimateFilterMonitoringMiddleware\n`)),mdx(\"p\",null,\"In the new middleware class extend the Palzin APM middleware and override the shouldRecorded method to implement your filtering strategy:\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-php\"}),`<?php\n\nuse \\\\Ultimate\\\\Laravel\\\\Middleware\\\\WebRequestMonitoring;\n\n\nclass UltimateFilterMonitoringMiddleware extends WebRequestMonitoring\n{\n    /**\n     * Determine if Palzin APM should record current request.\n     *\n     * @param \\\\Illuminate\\\\Http\\\\Request $request\n     * @return bool\n     */\n    protected function shouldRecorded($request): bool\n    {\n        return $request->userAgent() === 'Reliable User Agent';\n    }\n}\n\n`)),mdx(\"p\",null,\"If the method return true the web transaction will be recorded in your dashboard, if it return false the transaction will be completely ignored.\"),mdx(\"p\",t({},{className:\"hint error\"}),\"Remember to attach your new UltimateFilterMonitoringMiddleware class to the App\\\\Http\\\\Kernel:class instead of the default Palzin APM middleware.\"),mdx(\"h3\",t({},{id:\"hide-sensible-contents\"}),\"Hide sensible contents\"),mdx(\"p\",null,`You may hide sensible data from HTTP reuqests body like passwords. Palzin APM is able to detect that parameters in your request's body masking their content with a simple \"`,mdx(\"strong\",{parentName:\"p\"},\"**\"),'\".'),mdx(\"p\",null,\"Simply add fields to the hidden_parameters array in the in Palzin APM config file:\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-php\"}),`'hidden_parameters' => [\n    'password',\n    'password_confirmation',\n    \n    // Other fields here...\n],\n`)),mdx(\"p\",null,\"You can specify nested fields using the dot notation like user.password\"),mdx(\"h2\",t({},{id:\"identify-controllermethod-execution\"}),\"Identify Controller@Method execution\"),mdx(\"p\",null,\"If you prefer to have a clear visibility of what controller and method are executed during an HTTP request instead of the request path, you can use the code below inside the boot method of one of your ServiceProvider. \"),mdx(\"p\",null,\"Maybe the best place could be EventsServiceProvider.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-php\"}),`use Illuminate\\\\Routing\\\\Events\\\\RouteMatched;\n\n/**\n * Register any events for your application.\n *\n * @return void\n */\npublic function boot() \n{\n    parent::boot();\n\n    /*\n     * Changes the way Palzin APM reports transactions in your dashboard.\n     */\n    Event::listen(RouteMatched::class, function(RouteMatched $event) {\n        $name = $event->route->getActionName();\n    \n        if(ultimate()->hasTransaction()) {\n            ultimate()->currentTransaction()->name = $name;\n        } else {\n            ultimate()->startTransaction($name);\n        }\n    });\n}\n`)),mdx(\"p\",null,\"This will change the way Palzin APM reports transactions in your dashboard from GET /path/{id} to YourController@yourMethod .\"))}MDXContent.isMDXComponent=!0;\n","scope":{"part":"Palzin APM","title":"Http Requests Monitoring","description":"Monitor your application behaviour during incoming http requests.","tocRaw":[{"content":"Introduction","slug":"introduction","lvl":3,"i":0,"seen":0},{"content":"Option 1 - Attach to the middleware group (recommended)","slug":"option-1---attach-to-the-middleware-group-recommended","lvl":3,"i":1,"seen":0},{"content":"Option 2 - Use as middleware key","slug":"option-2---use-as-middleware-key","lvl":3,"i":2,"seen":0},{"content":"Ignore Web Requests","slug":"ignore-web-requests","lvl":3,"i":3,"seen":0},{"content":"Hide sensible contents","slug":"hide-sensible-contents","lvl":3,"i":4,"seen":0},{"content":"Identify Controller@Method execution","slug":"identify-controllermethod-execution","lvl":2,"i":5,"seen":0}]}},"frontMatter":{"part":"Palzin APM","title":"Http Requests Monitoring","description":"Monitor your application behaviour during incoming http requests.","tocRaw":[{"content":"Introduction","slug":"introduction","lvl":3,"i":0,"seen":0},{"content":"Option 1 - Attach to the middleware group (recommended)","slug":"option-1---attach-to-the-middleware-group-recommended","lvl":3,"i":1,"seen":0},{"content":"Option 2 - Use as middleware key","slug":"option-2---use-as-middleware-key","lvl":3,"i":2,"seen":0},{"content":"Ignore Web Requests","slug":"ignore-web-requests","lvl":3,"i":3,"seen":0},{"content":"Hide sensible contents","slug":"hide-sensible-contents","lvl":3,"i":4,"seen":0},{"content":"Identify Controller@Method execution","slug":"identify-controllermethod-execution","lvl":2,"i":5,"seen":0}]}},"__N_SSG":true}