{"pageProps":{"source":{"compiledSource":"var h=Object.defineProperty,u=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var p=(e,t,a)=>t in e?h(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,n=(e,t)=>{for(var a in t||(t={}))i.call(t,a)&&p(e,a,t[a]);if(r)for(var a of r(t))s.call(t,a)&&p(e,a,t[a]);return e},c=(e,t)=>u(e,d(t));var l=(e,t)=>{var a={};for(var o in e)i.call(e,o)&&t.indexOf(o)<0&&(a[o]=e[o]);if(e!=null&&r)for(var o of r(e))t.indexOf(o)<0&&s.call(e,o)&&(a[o]=e[o]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var o=a,{components:e}=o,t=l(o,[\"components\"]);return mdx(MDXLayout,c(n(n({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"hr\",null),mdx(\"h2\",n({},{id:\"transactions\"}),\"Transactions\"),mdx(\"p\",null,\"All start with a transaction. A Transaction represents an execution cycle and it can contains one or hundreds of segments.\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"It should be started as soon as possible in your application to better represent the time your script takes to fulfill the request.\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"Typically the transaction should be started in the entry point of your application e.g. \",mdx(\"strong\",{parentName:\"p\"},\"index.php\")),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-php\"}),`/*\n * A transaction should start as soon as possible, \n * typically in the \"index.php\" file of your application.\n */\n$pathInfo = explode('?', $_SERVER[\"REQUEST_URI\"]);\n$path = array_shift($pathInfo);\n\n$ultimate->startTransaction($path);\n\n\n// Continue with the script...\n`)),mdx(\"h2\",n({},{id:\"set-transaction-result\"}),\"Set transaction result\"),mdx(\"p\",null,\"When your application return a response back to the client you can setup the result of the transaction like the HTTP code:\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-php\"}),`$ultimate->currentTransaction()->setResult(200);\n\n`)),mdx(\"h2\",n({},{id:\"add-context\"}),\"Add Context\"),mdx(\"p\",null,\"Each transaction can be enriched with additional information to have a more complete picture of the process execution context.\"),mdx(\"p\",null,\"You can use the addCotext method to attach new tabs to the current transaction:\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-php\"}),`$ultimate->currentTransaction()->addContext('label', ['foo' => 'bar']);\n\n`)),mdx(\"p\",null,'Contextual information will be reported as additional tabs in the transaction view. This code example creates a new tab \"Label\" in the transaction details as showed in the image below:'),mdx(\"p\",null,mdx(\"img\",n({parentName:\"p\"},{src:\"/images/transaction.png\",alt:\"Transaction\"})),\" \"),mdx(\"h2\",n({},{id:\"make-palzin-apm-available-in-your-application-globally\"}),\"Make Palzin APM available in your application globally\"),mdx(\"p\",null,\"To be free to add new segments, or interact with the current transaction you need a way to make the Palzin APM instance available everywhere in your application.\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"Use an IoC container like \",mdx(\"a\",n({parentName:\"p\"},{href:\"https://php-di.org/\",target:\"_blank\",rel:\"nofollow noopener noreferrer\"}),\"PHP-DI\"),\" is a common way to distribute internal services inside an application. If your application has one, or implement other similar strategies, you could put the Palzin APM instance in the registry:\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-php\"}),`$container->set('ultimate', $ultimate);\n\n`)),mdx(\"p\",null,\"in order to use it later inside your application to add segments:\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-php\"}),`class UserController extends BaseController\n{\n    /**\n     * @var \\\\Ultimate\\\\Ultimate\n     */\n    protected $ultimate;\n    \n    /**\n     * UserController constructor.\n     */\n    public function __construct()\n    {\n        // Get Palzin APM instance from the container.\n        $this->ultimate = $container->get('ultimate');\n    }\n    \n    /**\n     * Do something.\n     */\n    public function action()\n    {\n        // Monitor a piece of code and return the result back to the client.\n        return $this->ultimate->addSegment(function () {\n            \n            return $this->someService->doSomething();\n        \n        }, 'someService', 'doSomething');\n    }\n}\n\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"part":"Palzin APM","title":"Usage","description":"How to start monitoring your script.","tocRaw":[{"content":"Transactions","slug":"transactions","lvl":2,"i":0,"seen":0},{"content":"Set transaction result","slug":"set-transaction-result","lvl":2,"i":1,"seen":0},{"content":"Add Context","slug":"add-context","lvl":2,"i":2,"seen":0},{"content":"Make Palzin APM available in your application globally","slug":"make-palzin-apm-available-in-your-application-globally","lvl":2,"i":3,"seen":0}]}},"frontMatter":{"part":"Palzin APM","title":"Usage","description":"How to start monitoring your script.","tocRaw":[{"content":"Transactions","slug":"transactions","lvl":2,"i":0,"seen":0},{"content":"Set transaction result","slug":"set-transaction-result","lvl":2,"i":1,"seen":0},{"content":"Add Context","slug":"add-context","lvl":2,"i":2,"seen":0},{"content":"Make Palzin APM available in your application globally","slug":"make-palzin-apm-available-in-your-application-globally","lvl":2,"i":3,"seen":0}]}},"__N_SSG":true}